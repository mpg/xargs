                            Trucs à faire pour xargs
                            ------------------------

% Pour la prochaine version
% -------------------------

[ ] Penser à décommenter le test dans la doc. De façon générale, bien relire la
    doc et surtout celle du code en ajoutant les \begin{macro} kivonbien. (Tenir
    compte des trucs gribouillés sur papier v1.0 pour commencer.) (Créer, sous
    une forme ou une autre, des sous-section et les munir de liens cliquables
    (cf minitoc).)

[ ] Suite de test :
    [ ] test de chaque commande, cas de base ; (reste \CCx à faire)
    [ ] gestion des arguments : indep de la forme (courte) et de l'ordre ;
    [ ] préfixe pour chaque commande + \Check-compatibilité avec LaTeX ;
    [ ] présence de \ifs (def, val par défaut, val d'arguments (opt ou pas)) ;
    [ ] espaces parasites pour chaque commande dans un max de situations ;
    [ ] présence de \par partout (avec ou sans ted) ;
    [ ] robustesse des commandes définies ;
    [ ] messages d'erreur ;
    [ ] c'est tout pour cette fois...

[ ] Relire les usages de \@onlypreamble (fautes de frappe).

[x] Revoir les conditions d'explosion de \newcommand avec des # (et pourquoi pas
    des \if) et s'assurer que les miennes soient au moins aussi restricitves.
    - Résultat : tout marche bien avec les \if, les # dans un argument optionel
    sont OK, mais pas dans une valeur par défaut. 
    - Pour moi, implique d'utiliser ted pour se protéger des # en cas de
      usedefault, ou admettre que # et usedefault sont incompatibles. (Ou alors
    mettre useted comme option.)
    -> Pour le moment, on abandonne les # et les \ifs qui exigeraient un
    prétraitement considérable par ted pour une utilité douteuse.

[x] Mettre tout le code de parsing dans un groupe, par propreté.

[ ] [fait, mais] Ajouter une option pour le préfixe (\long, etc)
    [ ] Regarder individuellement chaque variante : choix du comportement
    adéquat, test de ce comportement. (En part, env et \DRCx.) (Tenir compte de
    la compatibilité LaTeX.)
    [ ] Regarder pour \CheckCommandx.

[x] (Abandon) Rendre tout robuste à la présence de \if !  
    État actuel : ok (sous réserves) pour les \if dans le texte de def ou dans
    les valeurs d'arguments, mais PB si \if dans une valeur par défaut.
    -> Résultat : le problème avec les \if vient de xkeyval. À moins d'un
    pré-traitement intensif par ted, il n'y a rien à faire. On abandonne sur ce
    front.
    
[x] Voir le truc à la \newlyxcommand... (Envoyé, en attente de retour des
    tests.)

[ ] Vérifier les usages de \xargs@temp (portée, tout ça) (pas grave au fond)...
    ->  Relire le code.

[ ] Mettre des \@ifdefinable autour des \define@key ? (Revoir les \@ifdefinable
    des macros internes genre \xargs@prefix, \xargs@default@flag, etc. Remarquer
    aussi que pas mal des trucs arrivent dans un groupe...) Point à joindre avec
    la vérification des usages de \xargs@temp. (Priorité basse.)

% Plus tard, ou à repenser
% ------------------------

[ ] Ajouter l'option ted.

[ ] Ajouter une option pour choisir le comportement du dernier test quant aux
    espaces. Difficile en fait : nécessite de calculer l'emplacement du dernier
    argument obligatoire. Cela en vaut-il vraiment la peine ?

Créer un \CheckEnvironmentx ?

Lire optparams bien, un peu xparse, et répondre à Morten...

Réfléchir aux étoiles...

